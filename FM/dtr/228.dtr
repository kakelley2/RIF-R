Experiment( SubjectCode)
{
  Context()
  {
    AssignmentGroup()
    {
      ExperimentName = "REDMO 25";
      new Symbol = 1;
      DataFileDestination = ".";
      DataFileTrialFormat = "%SubjectCode%";
      SkipBoundingBlockDisplays = 0;
      RandomizeTrials = 0;
      StopKey = de.pxlab.pxl.KeyCodes.ENTER_KEY;
    }
    Session()
    {
      Instruction()
      {
        Text = " ";
      }
    }
    Block();
    Trial:INST1( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["Thank you for your interest in our study! ", " ", "In this task, you will be presented with a series of letters on the screen. For each letter shown, you will need to respond by typing a designated two-finger sequence by using the eight orange markers on the keyboard in front of you. The two-finger sequence will be different for each letter shown. Before you begin, please rest your fingers on the eight orange markers on the keyboard in front of you.", " ", "It is very important that you try to enter each two-finger sequence correctly for each letter presented on the screen. This task tests how well you can learn each two-finger sequence, so it is very important that you pay attention and take this task seriously. After the task, you will be tested on how well you learned and remembered the two-finger sequences for the letters."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "continue";
        LocationY = 300;
        Width = 200;
        Height = 60;
      }
    }
    Trial:INST2( Picture.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "In the initial learning phase of the experiment, you will be presented with a letter along with an image of a left hand and a right hand (see below). Two fingers on either the left hand or the right hand will quickly light up in order to reveal the two-finger sequenced related to that letter. The first finger to light up in the sequence will be in yellow, and the second finger to light up in the sequence will be in blue. After the two-finger sequence is flashed on the screen, the image of the two hands will disappear. Once the two hands disappear from the screen, you will just see the letter. Now enter the two-finger sequence for that letter previously shown.";
        LocationY = -200;
        FontSize = 24;
      }
      Picture()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Directory = "./images";
        LocationY = 80;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "continue";
        LocationY = 300;
        Width = 200;
        Height = 60;
      }
    }
    Trial:INST3( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["While performing this task, please try to keep your other fingers on their markers on the keyboard when they are not part of the two-finger sequence. It is important that you keep your eyes focused on the center of the screen where the individual letters appear. Please try to perceive the two-finger sequence presented below that letter from the corner of your eye, that is, do not let your eyes wander to the image of the two hands. Look at the letter and remember what the two-finger sequence is for that letter. It is quite difficult to learn the two-finger sequences. Therefore, please try your best to focus in order to do well.", " ", "Six of the twelve two-finger sequences involve two fingers on your left hand. These two-finger sequences are for the letters A, B, C, D, E, and F. The other six two-finger sequences involve your right hand. These two-finger sequences are for the letters U, V, W, X, Y, and Z. The two-finger sequence for any particular letter will always relate to the same hand for which it was originally shown. ", " ", "Once you click on Start!, you will have 10 seconds to rest your fingers on the buttons marked on the keyboard and to focus on the center of the screen. Then, the learning phase will begin."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INST4( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "This was a first pass with all the letters and corresponding two-finger movements. In the second part of the learning phase, you will be presented with the letters and two-finger sequences just as you were in the first part of the learning phase. Please note that the second part of this phase is longer than the first part. Each letter will be presented on the screen several times during this phase, so you will have the opportunity to learn the correct two-finger sequence for each letter.";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTAB( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["The two-finger sequences for these letters shown consist of finger movements on the left hand. When you are presented with each letter, try your hardest to remember the appropriate two-finger sequence you learned for that letter and press those keys.", "When you click on Start!, you will have 10 seconds to rest your fingers back on the buttons marked on the keyboard. Then, the first letter will appear. Please leave your fingers on their markers when they are not part of the two-finger response for a letter shown."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:IBILD( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "In the following task, you are asked to make an aesthetic evaluation of symbols, that is, an assessment of how attractive you think a symbol is. You will gradually unveil several Chinese characters by clicking on the gray boxes on the screen. A complete Chinese character will be revealed when you have clicked all of boxes. After the Chinese character has been fully uncovered, you will be asked to rate its aesthetic appeal at the bottom of the screen. Minus (-) signs indicate that you find the image unappealing. Plus (+) signs indicate that you find the image appealing. Please click which set of minus or plus signs most correctly matches your aesthetic evaluation.";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "OK";
        LocationY = 300;
        Width = 200;
        Height = 60;
      }
    }
    Trial:INSTTEST( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["A memory test will now take place. You will again be presented with letters from the learning phase. Please remember the corresponding two-finger sequence for that letter and enter it. ", "When you click on Start!, you will have 10 seconds to rest your fingers on the markers on the keyboard as before. Then, the first letter will appear as in the previous task. Please leave your fingers on the markers during the task if they are not required in the two-finger sequence for a particular letter. "];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTRECALL( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["In the following test phase, you will be asked to type the two-finger sequences from the learning phase. There were 6 two-finger sequences for fingers on the left hand and 6 two-finger sequences for fingers on the right hand. For confirmation of a keystroke, a rhombus will appear on the screen. Hence, when the two-finger sequence has been typed, you will see two rhombuses on the screen. As soon as these have disappeared, you can enter the next two-finger sequence. If you cannot remember all the sequences, guess.", " ", "As soon as you click on Start!, you will have 10 seconds to rest your fingers on the markers of the keyboard as before. Then, please enter the two-finger sequences. Please continue to rest your other fingers on the markers when they are not used in a particular two-finger response."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTRECOG( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "A test now follows in which the images of the hands from the learning phase will be shown. As before, two fingers will light up to show a sequence. Please indicate whether or not the two-finger sequence is one that appeared during the learning phase. To indicate this, use the mouse to click on the appropriate box on the screen: old (if the two-finger sequence occurred in the learning phase) or new (if the two-finger sequence did not occur during the learning phase). ";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTIMP( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "During the following part of the task, please type each of the letters appearing on the screen as quickly as you can.  Place your fingers as before on the marks and leave them there throughout. Enter each letter using the designated finger for that letter, e.g., the A key with the little finger of your left hand, the S key with the ring finger of your left hand, etc. ";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:COUNT( Message.Text)
    {
      Message()
      {
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:H( Message.Text, Picture.FileName)
    {
      Message()
      {
        LocationY = 0;
        Color = White;
      }
      Picture()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 150;
        LocationY = 260;
        Directory = "./images";
      }
    }
    Trial:H2( Picture.FileName)
    {
      Picture()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 150;
        LocationY = 260;
        Directory = "./images";
      }
    }
    Trial:L1( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L1.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L1.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L2( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L2.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L2.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L3( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L3.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L3.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L4( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L4.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L4.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L5( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L5.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L5.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L6( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L6.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L6.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R1( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R1.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R1.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R2( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R2.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R2.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R3( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R3.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R3.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R4( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R4.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R4.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R5( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R5.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R5.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R6( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R6.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R6.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:RECOG( Picture.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      Picture()
      {
        Directory = "./images";
        LocationY = 260;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["alt", "neu"];
        LocationY = -50;
        Width = 240;
        Height = 60;
      }
    }
    Trial:RECALL( Message:A.Text, Message:B.Text)
    {
      Message:A()
      {
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
      }
      Message:B()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        LocationY = 100;
      }
    }
    Trial:RECALLL( Message:A.Text, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        LocationY = 100;
      }
      Message:B()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        FontSize = 36;
        ResponseSet = [0, 69, 81, 82, 86, 87];
      }
    }
    Trial:RECALLR( Message:A.Text, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        LocationY = 100;
      }
      Message:B()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        FontSize = 36;
        ResponseSet = [0, 73, 78, 79, 80, 85];
      }
    }
    Trial:Ta( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tb( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tc( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Td( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Te( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tf( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tu( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tv( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tw( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tx( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Ty( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tz( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:c0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:RATING( Picture:L.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "How do you like this character? (- - - - - = not at all, + + + + + = very much)";
        LocationY = 320;
        FontSize = 24;
        Overlay = de.pxlab.pxl.OverlayCodes.DISPLAY_LIST;
      }
      Picture:L()
      {
        LocationY = 0;
        Directory = "./images";
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["-----", "----", "---", "--", "-", "+", "++", "+++", "++++", "+++++"];
        LocationY = 400;
        LocationX = 0;
        Width = 1200;
        Height = 30;
      }
    }
    Trial:DEMO( Message.Text, TextInput.Text, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Type in your answer, and then please press ENTER.";
        LocationY = -200;
        FontSize = 24;
        Overlay = de.pxlab.pxl.OverlayCodes.DISPLAY_LIST;
      }
      Message()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        FontSize = 32;
      }
      TextInput()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        LocationY = 200;
        FontSize = 32;
        Timer = de.pxlab.pxl.TimerCodes.STOP_KEY_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
      }
    }
    Trial:RL( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Please indicate whether you are right- or left-handed.";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["right-handed", "left-handed"];
        LocationY = 250;
        Width = 460;
        Height = 60;
      }
    }
    Trial:KL( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Can you play the piano?";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["yes", "no"];
        LocationY = 250;
        Width = 460;
        Height = 60;
      }
    }
    Trial:TIPP( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Do you predominantly use the 10-finger system when typing on a keyboard?";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["yes", "no"];
        LocationY = 250;
        Width = 460;
        Height = 60;
      }
    }
    // Session dependent assignments

    AssignmentGroup()
    {
      SubjectCode = 228;
      RemainingSessionGroup = 0;
      RemainingSessionRuns = 0;
      Date = "4/3/14 10:26:30 AM PDT";
      PXLabVersion = "2.1.19";
      PrimaryScreen.ColorDevice = de.pxlab.pxl.ColorDeviceTransformCodes.SONY_TRINITRON;
      PrimaryScreen.ColorDeviceDACRange = 255;
      PrimaryScreen.RedPrimary = [21.26, 0.621, 0.34];
      PrimaryScreen.GreenPrimary = [71.52, 0.281, 0.606];
      PrimaryScreen.BluePrimary = [7.22, 0.152, 0.067];
      PrimaryScreen.RedGamma = [2.4, 1];
      PrimaryScreen.GreenGamma = [2.4, 1];
      PrimaryScreen.BlueGamma = [2.4, 1];
      SecondaryScreen.ColorDevice = de.pxlab.pxl.ColorDeviceTransformCodes.SONY_TRINITRON;
      SecondaryScreen.ColorDeviceDACRange = 255;
      SecondaryScreen.RedPrimary = [21.26, 0.621, 0.34];
      SecondaryScreen.GreenPrimary = [71.52, 0.281, 0.606];
      SecondaryScreen.BluePrimary = [7.22, 0.152, 0.067];
      SecondaryScreen.RedGamma = [2.4, 1];
      SecondaryScreen.GreenGamma = [2.4, 1];
      SecondaryScreen.BlueGamma = [2.4, 1];
      DeviceWhitePoint = [100, 0.3065, 0.3468];
      CIEWhitePoint = 0;
    }
  }
  Factors()
  {
    IndependentFactor( Symbol)
    {
      FactorLevel( 1);
      FactorLevel( 2);
    }
    DependentFactor( ResponseTime);
  }
  Procedure()
  {
    Session()
    {
      Block()
      {
        Trial:INST1( 0, 62877.06);
        Trial:INST2( "Hand.jpg", 0, 51972.895);
        Trial:INST3( 0, 76241.258);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 3, 1680.735);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 17759.903);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1199.8);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1000.993);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 2586.325);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 1155.48);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 945.757);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 859.003);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 1156.805);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 1201.566);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 903.189);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 843.257);
      }
      Block()
      {
        Trial:INST4( 0, 21227.406);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 755.48);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 648.213);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 1199.371);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 3, 1122.954);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 868.599);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 958.258);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 855.115);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 889.582);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1655.732);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 2170.787);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1109.978);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 758.316);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 1373.548);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 3, 802.476);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1231.176);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 1046.338);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 1470.834);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 640.158);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 726.766);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1001.172);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 1682.681);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 983.868);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 8, "a", 1, 952.874);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 890.842);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 897.862);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 819.636);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 693.777);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 766.127);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 760.055);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 811.529);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 650.109);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 539.034);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 1000.791);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 545.762);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 576.405);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 840.73);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 784.306);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 747.249);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 665.571);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 760.688);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 887.408);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 901.466);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 639.613);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 759.853);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 827.644);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 813.478);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 901.098);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 1503.54);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 974.5);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 855.828);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 706.108);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 850.589);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 790.769);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 3, 785.985);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 787.708);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 1081.821);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1262.797);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 708.6);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 945.165);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 698.175);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 637.276);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 812.701);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 743.336);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 683.428);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 639.253);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 934.301);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 738.745);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1112.401);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 652.306);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 2160.871);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 836.046);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 622.472);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 504.416);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 8, "a", 2, 701.622);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 720.419);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 775.197);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 596.425);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 1278.645);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 3, 799.436);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1014.591);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 776.302);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 944.952);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 945.039);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 763.444);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1240.744);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 619.112);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 1033.631);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 799.893);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 3, 714.949);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 758.735);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 855.92);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 596.733);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1100.254);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 836.708);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 726.896);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 566.841);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 668.901);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1052.013);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 934.568);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 889.581);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 910.33);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 848.084);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 586.161);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 1461.1);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 547.729);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 631.471);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 637.868);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 651.378);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 6, "f", 1, 3007.457);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 4, "z", 3, 756.875);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 806.397);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1078.383);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 812.484);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 545.643);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 558.88);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 743.465);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 530.453);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 680.913);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 691.36);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 893.549);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 676.77);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 513.933);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 614.381);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 849.452);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 737.61);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 716.306);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 522.745);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 821.661);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 740.591);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 831.333);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 535.681);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 993.686);
      }
      Block()
      {
        Trial:INSTAB( 0, 14558.39);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:Tf( "f", 1, "f", 1, 2284.084);
        Trial:Te( "e", 1, "e", 1, 1505.855);
        Trial:Td( "d", 1, "d", 1, 1598.873);
        Trial:Tf( "f", 1, "f", 1, 1298.756);
        Trial:Te( "e", 8, "e", 2, 2056.018);
        Trial:Td( "d", 1, "d", 1, 1975.405);
        Trial:Tf( "f", 1, "f", 1, 1542.485);
        Trial:Td( "d", 1, "d", 1, 2047.322);
        Trial:Te( "e", 1, "e", 1, 1079.161);
        Trial:Tf( "f", 1, "f", 1, 1181.716);
        Trial:Te( "e", 1, "e", 1, 1156.468);
        Trial:Td( "d", 1, "d", 1, 1669.68);
        Trial:Te( "e", 1, "e", 1, 1510.598);
        Trial:Tf( "f", 1, "f", 1, 1349.197);
        Trial:Td( "d", 1, "d", 1, 1967.101);
        Trial:Tf( "f", 1, "f", 1, 1085.059);
        Trial:Te( "e", 1, "e", 1, 1421.803);
        Trial:Td( "d", 1, "d", 1, 1526.473);
        Trial:Tf( "f", 1, "f", 1, 1060.091);
        Trial:Te( "e", 1, "e", 1, 1175.072);
        Trial:Td( "d", 1, "d", 1, 2525.324);
        Trial:Tf( "f", 1, "f", 1, 1237.332);
        Trial:Td( "d", 1, "d", 1, 973.542);
        Trial:Te( "e", 1, "e", 1, 1118.609);
        Trial:Tf( "f", 2, "f", 1, 1389.527);
        Trial:Te( "e", 1, "e", 1, 1861.795);
        Trial:Td( "d", 1, "d", 1, 1374.993);
        Trial:Te( "e", 1, "e", 1, 1525.361);
        Trial:Tf( "f", 1, "f", 1, 1245.428);
        Trial:Td( "d", 1, "d", 1, 1382.014);
      }
      Block()
      {
        Trial:IBILD( 0, 28892.547);
      }
      Block()
      {
        Trial:e0( 0, 1857.473);
        Trial:e1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_13.jpg", "black.jpg", "black.jpg", "black.jpg"], 0, 4696.763);
        Trial:e2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "black.jpg", "black.jpg"], 0, 1689.277);
        Trial:e3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "black.jpg", "black.jpg"], 0, 2662.024);
        Trial:e4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "black.jpg", "Folie1_16.jpg"], 0, 835.926);
        Trial:e5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "black.jpg", "Folie1_16.jpg"], 0, 913.58);
        Trial:e6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "black.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "black.jpg", "Folie1_16.jpg"], 0, 1001.092);
        Trial:e7( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "black.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 875.652);
        Trial:e8( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 1137.665);
        Trial:e9( ["black.jpg", "Folie1_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 847.305);
        Trial:e10( ["black.jpg", "Folie1_2.jpg", "Folie1_3.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 722.099);
        Trial:e11( ["black.jpg", "Folie1_2.jpg", "Folie1_3.jpg", "Folie1_4.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 866.221);
        Trial:e12( ["Folie1_1.jpg", "Folie1_2.jpg", "Folie1_3.jpg", "Folie1_4.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "black.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 929.829);
        Trial:e13( ["Folie1_1.jpg", "Folie1_2.jpg", "Folie1_3.jpg", "Folie1_4.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "Folie1_8.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "black.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 924.368);
        Trial:e14( ["Folie1_1.jpg", "Folie1_2.jpg", "Folie1_3.jpg", "Folie1_4.jpg", "black.jpg", "black.jpg", "Folie1_7.jpg", "Folie1_8.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "Folie1_11.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 855.983);
        Trial:e15( ["Folie1_1.jpg", "Folie1_2.jpg", "Folie1_3.jpg", "Folie1_4.jpg", "Folie1_5.jpg", "black.jpg", "Folie1_7.jpg", "Folie1_8.jpg", "Folie1_9.jpg", "Folie1_10.jpg", "Folie1_11.jpg", "Folie1_12.jpg", "Folie1_13.jpg", "Folie1_14.jpg", "Folie1_15.jpg", "Folie1_16.jpg"], 0, 661.767);
        Trial:RATING( "Folie1.jpg", 9, 7008.125);
        Trial:c0( 0, 1025.091);
        Trial:c1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_16.jpg"], 0, 1001.371);
        Trial:c2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 800.14);
        Trial:c3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 807.313);
        Trial:c4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 618.052);
        Trial:c5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 848.162);
        Trial:c6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 794.064);
        Trial:c7( ["Folie2_1.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 645.404);
        Trial:c8( ["Folie2_1.jpg", "Folie2_2.jpg", "black.jpg", "black.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 633.141);
        Trial:c9( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "black.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 640.947);
        Trial:c10( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "Folie2_4.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 709.806);
        Trial:c11( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "Folie2_4.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "Folie2_8.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 597.117);
        Trial:c12( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "Folie2_4.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "Folie2_8.jpg", "Folie2_9.jpg", "black.jpg", "black.jpg", "Folie2_12.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 540.931);
        Trial:c13( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "Folie2_4.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "Folie2_8.jpg", "Folie2_9.jpg", "black.jpg", "Folie2_11.jpg", "Folie2_12.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 495.97);
        Trial:c14( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "Folie2_4.jpg", "Folie2_5.jpg", "black.jpg", "black.jpg", "Folie2_8.jpg", "Folie2_9.jpg", "Folie2_10.jpg", "Folie2_11.jpg", "Folie2_12.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 443.742);
        Trial:c15( ["Folie2_1.jpg", "Folie2_2.jpg", "Folie2_3.jpg", "Folie2_4.jpg", "Folie2_5.jpg", "Folie2_6.jpg", "black.jpg", "Folie2_8.jpg", "Folie2_9.jpg", "Folie2_10.jpg", "Folie2_11.jpg", "Folie2_12.jpg", "Folie2_13.jpg", "Folie2_14.jpg", "Folie2_15.jpg", "Folie2_16.jpg"], 0, 461.282);
        Trial:RATING( "Folie2.jpg", 5, 3511.756);
        Trial:e0( 0, 2051.065);
        Trial:e1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_13.jpg", "black.jpg", "black.jpg", "black.jpg"], 0, 686.738);
        Trial:e2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "black.jpg", "black.jpg"], 0, 812.409);
        Trial:e3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "black.jpg", "black.jpg"], 0, 753.143);
        Trial:e4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "black.jpg", "Folie3_16.jpg"], 0, 865.024);
        Trial:e5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "black.jpg", "Folie3_16.jpg"], 0, 771.613);
        Trial:e6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "black.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "black.jpg", "Folie3_16.jpg"], 0, 804.074);
        Trial:e7( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "black.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 804.804);
        Trial:e8( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 797.706);
        Trial:e9( ["black.jpg", "Folie3_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 745.247);
        Trial:e10( ["black.jpg", "Folie3_2.jpg", "Folie3_3.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 769.801);
        Trial:e11( ["black.jpg", "Folie3_2.jpg", "Folie3_3.jpg", "Folie3_4.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 869.954);
        Trial:e12( ["Folie3_1.jpg", "Folie3_2.jpg", "Folie3_3.jpg", "Folie3_4.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "black.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 892.917);
        Trial:e13( ["Folie3_1.jpg", "Folie3_2.jpg", "Folie3_3.jpg", "Folie3_4.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "Folie3_8.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "black.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 903.072);
        Trial:e14( ["Folie3_1.jpg", "Folie3_2.jpg", "Folie3_3.jpg", "Folie3_4.jpg", "black.jpg", "black.jpg", "Folie3_7.jpg", "Folie3_8.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "Folie3_11.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 754.042);
        Trial:e15( ["Folie3_1.jpg", "Folie3_2.jpg", "Folie3_3.jpg", "Folie3_4.jpg", "Folie3_5.jpg", "black.jpg", "Folie3_7.jpg", "Folie3_8.jpg", "Folie3_9.jpg", "Folie3_10.jpg", "Folie3_11.jpg", "Folie3_12.jpg", "Folie3_13.jpg", "Folie3_14.jpg", "Folie3_15.jpg", "Folie3_16.jpg"], 0, 721.6);
        Trial:RATING( "Folie3.jpg", 4, 1981.799);
        Trial:f0( 0, 1434.931);
        Trial:f1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_16.jpg"], 0, 902.013);
        Trial:f2( ["black.jpg", "Folie4_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_16.jpg"], 0, 925.622);
        Trial:f3( ["black.jpg", "Folie4_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_16.jpg"], 0, 840.259);
        Trial:f4( ["black.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_16.jpg"], 0, 1035.992);
        Trial:f5( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_16.jpg"], 0, 877.403);
        Trial:f6( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "black.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_16.jpg"], 0, 917.992);
        Trial:f7( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "black.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 725.351);
        Trial:f8( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 851.904);
        Trial:f9( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 759.657);
        Trial:f10( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "black.jpg", "black.jpg", "Folie4_7.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 762.955);
        Trial:f11( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "Folie4_5.jpg", "black.jpg", "Folie4_7.jpg", "black.jpg", "black.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 806.945);
        Trial:f12( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "Folie4_5.jpg", "black.jpg", "Folie4_7.jpg", "Folie4_8.jpg", "black.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "black.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 984.048);
        Trial:f13( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "Folie4_5.jpg", "black.jpg", "Folie4_7.jpg", "Folie4_8.jpg", "black.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "Folie4_14.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 816.987);
        Trial:f14( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "Folie4_5.jpg", "black.jpg", "Folie4_7.jpg", "Folie4_8.jpg", "Folie4_9.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "black.jpg", "Folie4_14.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 891.069);
        Trial:f15( ["Folie4_1.jpg", "Folie4_2.jpg", "Folie4_3.jpg", "Folie4_4.jpg", "Folie4_5.jpg", "black.jpg", "Folie4_7.jpg", "Folie4_8.jpg", "Folie4_9.jpg", "Folie4_10.jpg", "Folie4_11.jpg", "Folie4_12.jpg", "Folie4_13.jpg", "Folie4_14.jpg", "Folie4_15.jpg", "Folie4_16.jpg"], 0, 638.22);
        Trial:RATING( "Folie4.jpg", 7, 1807.312);
        Trial:c0( 0, 1031.574);
        Trial:c1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_16.jpg"], 0, 720.417);
        Trial:c2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 702.508);
        Trial:c3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 776.458);
        Trial:c4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 699.956);
        Trial:c5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 674.921);
        Trial:c6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 891.718);
        Trial:c7( ["Folie5_1.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 677.811);
        Trial:c8( ["Folie5_1.jpg", "Folie5_2.jpg", "black.jpg", "black.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 581.545);
        Trial:c9( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "black.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 554.492);
        Trial:c10( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "Folie5_4.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 575.322);
        Trial:c11( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "Folie5_4.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "Folie5_8.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 550.214);
        Trial:c12( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "Folie5_4.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "Folie5_8.jpg", "Folie5_9.jpg", "black.jpg", "black.jpg", "Folie5_12.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 581.366);
        Trial:c13( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "Folie5_4.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "Folie5_8.jpg", "Folie5_9.jpg", "black.jpg", "Folie5_11.jpg", "Folie5_12.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 586.764);
        Trial:c14( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "Folie5_4.jpg", "Folie5_5.jpg", "black.jpg", "black.jpg", "Folie5_8.jpg", "Folie5_9.jpg", "Folie5_10.jpg", "Folie5_11.jpg", "Folie5_12.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 563.733);
        Trial:c15( ["Folie5_1.jpg", "Folie5_2.jpg", "Folie5_3.jpg", "Folie5_4.jpg", "Folie5_5.jpg", "Folie5_6.jpg", "black.jpg", "Folie5_8.jpg", "Folie5_9.jpg", "Folie5_10.jpg", "Folie5_11.jpg", "Folie5_12.jpg", "Folie5_13.jpg", "Folie5_14.jpg", "Folie5_15.jpg", "Folie5_16.jpg"], 0, 481.688);
        Trial:RATING( "Folie5.jpg", 6, 1525.859);
        Trial:f0( 0, 1177.606);
        Trial:f1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_16.jpg"], 0, 1136.559);
        Trial:f2( ["black.jpg", "Folie6_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_16.jpg"], 0, 871.342);
        Trial:f3( ["black.jpg", "Folie6_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_16.jpg"], 0, 874.962);
        Trial:f4( ["black.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_16.jpg"], 0, 858.335);
        Trial:f5( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_16.jpg"], 0, 1012.229);
        Trial:f6( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "black.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_16.jpg"], 0, 819.652);
        Trial:f7( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "black.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 774.086);
        Trial:f8( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 893.301);
        Trial:f9( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 670.661);
        Trial:f10( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "black.jpg", "black.jpg", "Folie6_7.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 820.053);
        Trial:f11( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "Folie6_5.jpg", "black.jpg", "Folie6_7.jpg", "black.jpg", "black.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 862.255);
        Trial:f12( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "Folie6_5.jpg", "black.jpg", "Folie6_7.jpg", "Folie6_8.jpg", "black.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "black.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 997.317);
        Trial:f13( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "Folie6_5.jpg", "black.jpg", "Folie6_7.jpg", "Folie6_8.jpg", "black.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "Folie6_14.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 786.176);
        Trial:f14( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "Folie6_5.jpg", "black.jpg", "Folie6_7.jpg", "Folie6_8.jpg", "Folie6_9.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "black.jpg", "Folie6_14.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 837.896);
        Trial:f15( ["Folie6_1.jpg", "Folie6_2.jpg", "Folie6_3.jpg", "Folie6_4.jpg", "Folie6_5.jpg", "black.jpg", "Folie6_7.jpg", "Folie6_8.jpg", "Folie6_9.jpg", "Folie6_10.jpg", "Folie6_11.jpg", "Folie6_12.jpg", "Folie6_13.jpg", "Folie6_14.jpg", "Folie6_15.jpg", "Folie6_16.jpg"], 0, 796.602);
        Trial:RATING( "Folie6.jpg", 8, 1643.712);
        Trial:i0( 0, 2617.782);
        Trial:i1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 668.11);
        Trial:i2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 723.586);
        Trial:i3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 699.293);
        Trial:i4( ["black.jpg", "black.jpg", "black.jpg", "Folie7_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 787.559);
        Trial:i5( ["black.jpg", "black.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 690.07);
        Trial:i6( ["black.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 975.119);
        Trial:i7( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 606.063);
        Trial:i8( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 630.063);
        Trial:i9( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 795.51);
        Trial:i10( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "Folie7_13.jpg", "black.jpg", "black.jpg", "Folie7_16.jpg"], 0, 595.031);
        Trial:i11( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "Folie7_13.jpg", "Folie7_14.jpg", "black.jpg", "Folie7_16.jpg"], 0, 592.656);
        Trial:i12( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "black.jpg", "Folie7_12.jpg", "Folie7_13.jpg", "Folie7_14.jpg", "Folie7_15.jpg", "Folie7_16.jpg"], 0, 569.933);
        Trial:i13( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "black.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "Folie7_11.jpg", "Folie7_12.jpg", "Folie7_13.jpg", "Folie7_14.jpg", "Folie7_15.jpg", "Folie7_16.jpg"], 0, 620.321);
        Trial:i14( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "black.jpg", "Folie7_7.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "Folie7_11.jpg", "Folie7_12.jpg", "Folie7_13.jpg", "Folie7_14.jpg", "Folie7_15.jpg", "Folie7_16.jpg"], 0, 596.661);
        Trial:i15( ["Folie7_1.jpg", "Folie7_2.jpg", "Folie7_3.jpg", "Folie7_4.jpg", "Folie7_5.jpg", "Folie7_6.jpg", "Folie7_7.jpg", "Folie7_8.jpg", "Folie7_9.jpg", "black.jpg", "Folie7_11.jpg", "Folie7_12.jpg", "Folie7_13.jpg", "Folie7_14.jpg", "Folie7_15.jpg", "Folie7_16.jpg"], 0, 603.834);
        Trial:RATING( "Folie7.jpg", 1, 1363.127);
        Trial:c0( 0, 858.06);
        Trial:c1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_16.jpg"], 0, 811.977);
        Trial:c2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 657.687);
        Trial:c3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 782.906);
        Trial:c4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 739.478);
        Trial:c5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 598.052);
        Trial:c6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 620.693);
        Trial:c7( ["Folie8_1.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 623.234);
        Trial:c8( ["Folie8_1.jpg", "Folie8_2.jpg", "black.jpg", "black.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 544.352);
        Trial:c9( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "black.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 608.361);
        Trial:c10( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "Folie8_4.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 635.462);
        Trial:c11( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "Folie8_4.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "Folie8_8.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 631.723);
        Trial:c12( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "Folie8_4.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "Folie8_8.jpg", "Folie8_9.jpg", "black.jpg", "black.jpg", "Folie8_12.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 585.167);
        Trial:c13( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "Folie8_4.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "Folie8_8.jpg", "Folie8_9.jpg", "black.jpg", "Folie8_11.jpg", "Folie8_12.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 710.79);
        Trial:c14( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "Folie8_4.jpg", "Folie8_5.jpg", "black.jpg", "black.jpg", "Folie8_8.jpg", "Folie8_9.jpg", "Folie8_10.jpg", "Folie8_11.jpg", "Folie8_12.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 586.875);
        Trial:c15( ["Folie8_1.jpg", "Folie8_2.jpg", "Folie8_3.jpg", "Folie8_4.jpg", "Folie8_5.jpg", "Folie8_6.jpg", "black.jpg", "Folie8_8.jpg", "Folie8_9.jpg", "Folie8_10.jpg", "Folie8_11.jpg", "Folie8_12.jpg", "Folie8_13.jpg", "Folie8_14.jpg", "Folie8_15.jpg", "Folie8_16.jpg"], 0, 626.283);
        Trial:RATING( "Folie8.jpg", 7, 1404.991);
        Trial:e0( 0, 2799.309);
        Trial:e1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_13.jpg", "black.jpg", "black.jpg", "black.jpg"], 0, 679.892);
        Trial:e2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "black.jpg", "black.jpg"], 0, 773.742);
        Trial:e3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "black.jpg", "black.jpg"], 0, 654.25);
        Trial:e4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "black.jpg", "Folie9_16.jpg"], 0, 823.443);
        Trial:e5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "black.jpg", "Folie9_16.jpg"], 0, 804.568);
        Trial:e6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "black.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "black.jpg", "Folie9_16.jpg"], 0, 853.268);
        Trial:e7( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "black.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 684.026);
        Trial:e8( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 801.366);
        Trial:e9( ["black.jpg", "Folie9_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 765.405);
        Trial:e10( ["black.jpg", "Folie9_2.jpg", "Folie9_3.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 740.058);
        Trial:e11( ["black.jpg", "Folie9_2.jpg", "Folie9_3.jpg", "Folie9_4.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 870.674);
        Trial:e12( ["Folie9_1.jpg", "Folie9_2.jpg", "Folie9_3.jpg", "Folie9_4.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "black.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 823.909);
        Trial:e13( ["Folie9_1.jpg", "Folie9_2.jpg", "Folie9_3.jpg", "Folie9_4.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "Folie9_8.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "black.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 1043.652);
        Trial:e14( ["Folie9_1.jpg", "Folie9_2.jpg", "Folie9_3.jpg", "Folie9_4.jpg", "black.jpg", "black.jpg", "Folie9_7.jpg", "Folie9_8.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "Folie9_11.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 793.829);
        Trial:e15( ["Folie9_1.jpg", "Folie9_2.jpg", "Folie9_3.jpg", "Folie9_4.jpg", "Folie9_5.jpg", "black.jpg", "Folie9_7.jpg", "Folie9_8.jpg", "Folie9_9.jpg", "Folie9_10.jpg", "Folie9_11.jpg", "Folie9_12.jpg", "Folie9_13.jpg", "Folie9_14.jpg", "Folie9_15.jpg", "Folie9_16.jpg"], 0, 568.371);
        Trial:RATING( "Folie9.jpg", 5, 2975.291);
        Trial:c0( 0, 956.702);
        Trial:c1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_16.jpg"], 0, 725.475);
        Trial:c2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 630.339);
        Trial:c3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 592.367);
        Trial:c4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 616.186);
        Trial:c5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 616.134);
        Trial:c6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 537.525);
        Trial:c7( ["Folie10_1.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 484.331);
        Trial:c8( ["Folie10_1.jpg", "Folie10_2.jpg", "black.jpg", "black.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 570.872);
        Trial:c9( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "black.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 558.315);
        Trial:c10( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "Folie10_4.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 576.318);
        Trial:c11( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "Folie10_4.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "Folie10_8.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 634.924);
        Trial:c12( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "Folie10_4.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "Folie10_8.jpg", "Folie10_9.jpg", "black.jpg", "black.jpg", "Folie10_12.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 556.98);
        Trial:c13( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "Folie10_4.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "Folie10_8.jpg", "Folie10_9.jpg", "black.jpg", "Folie10_11.jpg", "Folie10_12.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 492.728);
        Trial:c14( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "Folie10_4.jpg", "Folie10_5.jpg", "black.jpg", "black.jpg", "Folie10_8.jpg", "Folie10_9.jpg", "Folie10_10.jpg", "Folie10_11.jpg", "Folie10_12.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 488.874);
        Trial:c15( ["Folie10_1.jpg", "Folie10_2.jpg", "Folie10_3.jpg", "Folie10_4.jpg", "Folie10_5.jpg", "Folie10_6.jpg", "black.jpg", "Folie10_8.jpg", "Folie10_9.jpg", "Folie10_10.jpg", "Folie10_11.jpg", "Folie10_12.jpg", "Folie10_13.jpg", "Folie10_14.jpg", "Folie10_15.jpg", "Folie10_16.jpg"], 0, 498.77);
        Trial:RATING( "Folie10.jpg", 4, 2218.406);
        Trial:i0( 0, 1030.663);
        Trial:i1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 621.226);
        Trial:i2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 527.678);
        Trial:i3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 567.028);
        Trial:i4( ["black.jpg", "black.jpg", "black.jpg", "Folie11_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 566.806);
        Trial:i5( ["black.jpg", "black.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 631.345);
        Trial:i6( ["black.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 588.882);
        Trial:i7( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 588.16);
        Trial:i8( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 627.87);
        Trial:i9( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 533.697);
        Trial:i10( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "Folie11_13.jpg", "black.jpg", "black.jpg", "Folie11_16.jpg"], 0, 528.493);
        Trial:i11( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "Folie11_13.jpg", "Folie11_14.jpg", "black.jpg", "Folie11_16.jpg"], 0, 533.46);
        Trial:i12( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "black.jpg", "Folie11_12.jpg", "Folie11_13.jpg", "Folie11_14.jpg", "Folie11_15.jpg", "Folie11_16.jpg"], 0, 752.818);
        Trial:i13( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "black.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "Folie11_11.jpg", "Folie11_12.jpg", "Folie11_13.jpg", "Folie11_14.jpg", "Folie11_15.jpg", "Folie11_16.jpg"], 0, 876.902);
        Trial:i14( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "black.jpg", "Folie11_7.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "Folie11_11.jpg", "Folie11_12.jpg", "Folie11_13.jpg", "Folie11_14.jpg", "Folie11_15.jpg", "Folie11_16.jpg"], 0, 584.75);
        Trial:i15( ["Folie11_1.jpg", "Folie11_2.jpg", "Folie11_3.jpg", "Folie11_4.jpg", "Folie11_5.jpg", "Folie11_6.jpg", "Folie11_7.jpg", "Folie11_8.jpg", "Folie11_9.jpg", "black.jpg", "Folie11_11.jpg", "Folie11_12.jpg", "Folie11_13.jpg", "Folie11_14.jpg", "Folie11_15.jpg", "Folie11_16.jpg"], 0, 549.813);
        Trial:RATING( "Folie11.jpg", 4, 1880.972);
        Trial:f0( 0, 952.859);
        Trial:f1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_16.jpg"], 0, 929.164);
        Trial:f2( ["black.jpg", "Folie12_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_16.jpg"], 0, 799.74);
        Trial:f3( ["black.jpg", "Folie12_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_16.jpg"], 0, 806.61);
        Trial:f4( ["black.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_16.jpg"], 0, 921.287);
        Trial:f5( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_16.jpg"], 0, 1255.945);
        Trial:f6( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "black.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_16.jpg"], 0, 811.273);
        Trial:f7( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "black.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 677.473);
        Trial:f8( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 856.289);
        Trial:f9( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 680.342);
        Trial:f10( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "black.jpg", "black.jpg", "Folie12_7.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 828.437);
        Trial:f11( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "Folie12_5.jpg", "black.jpg", "Folie12_7.jpg", "black.jpg", "black.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 861.041);
        Trial:f12( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "Folie12_5.jpg", "black.jpg", "Folie12_7.jpg", "Folie12_8.jpg", "black.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "black.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 728.922);
        Trial:f13( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "Folie12_5.jpg", "black.jpg", "Folie12_7.jpg", "Folie12_8.jpg", "black.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "Folie12_14.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 673.551);
        Trial:f14( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "Folie12_5.jpg", "black.jpg", "Folie12_7.jpg", "Folie12_8.jpg", "Folie12_9.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "black.jpg", "Folie12_14.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 788.972);
        Trial:f15( ["Folie12_1.jpg", "Folie12_2.jpg", "Folie12_3.jpg", "Folie12_4.jpg", "Folie12_5.jpg", "black.jpg", "Folie12_7.jpg", "Folie12_8.jpg", "Folie12_9.jpg", "Folie12_10.jpg", "Folie12_11.jpg", "Folie12_12.jpg", "Folie12_13.jpg", "Folie12_14.jpg", "Folie12_15.jpg", "Folie12_16.jpg"], 0, 640.305);
        Trial:RATING( "Folie12.jpg", 6, 1580.492);
        Trial:i0( 0, 970.306);
        Trial:i1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 549.043);
        Trial:i2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 657.945);
        Trial:i3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 672.992);
        Trial:i4( ["black.jpg", "black.jpg", "black.jpg", "Folie13_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 742.173);
        Trial:i5( ["black.jpg", "black.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 674.644);
        Trial:i6( ["black.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 632.566);
        Trial:i7( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 650.617);
        Trial:i8( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 786.759);
        Trial:i9( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 612.944);
        Trial:i10( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "Folie13_13.jpg", "black.jpg", "black.jpg", "Folie13_16.jpg"], 0, 549.662);
        Trial:i11( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "Folie13_13.jpg", "Folie13_14.jpg", "black.jpg", "Folie13_16.jpg"], 0, 575.899);
        Trial:i12( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "black.jpg", "Folie13_12.jpg", "Folie13_13.jpg", "Folie13_14.jpg", "Folie13_15.jpg", "Folie13_16.jpg"], 0, 687.627);
        Trial:i13( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "black.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "Folie13_11.jpg", "Folie13_12.jpg", "Folie13_13.jpg", "Folie13_14.jpg", "Folie13_15.jpg", "Folie13_16.jpg"], 0, 645.432);
        Trial:i14( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "black.jpg", "Folie13_7.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "Folie13_11.jpg", "Folie13_12.jpg", "Folie13_13.jpg", "Folie13_14.jpg", "Folie13_15.jpg", "Folie13_16.jpg"], 0, 504.297);
        Trial:i15( ["Folie13_1.jpg", "Folie13_2.jpg", "Folie13_3.jpg", "Folie13_4.jpg", "Folie13_5.jpg", "Folie13_6.jpg", "Folie13_7.jpg", "Folie13_8.jpg", "Folie13_9.jpg", "black.jpg", "Folie13_11.jpg", "Folie13_12.jpg", "Folie13_13.jpg", "Folie13_14.jpg", "Folie13_15.jpg", "Folie13_16.jpg"], 0, 595.164);
        Trial:RATING( "Folie13.jpg", 3, 1451.62);
        Trial:f0( 0, 1112.942);
        Trial:f1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_16.jpg"], 0, 1098.91);
        Trial:f2( ["black.jpg", "Folie14_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_16.jpg"], 0, 874.282);
        Trial:f3( ["black.jpg", "Folie14_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_16.jpg"], 0, 879.677);
        Trial:f4( ["black.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_16.jpg"], 0, 1025.234);
        Trial:f5( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_16.jpg"], 0, 1120.794);
        Trial:f6( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "black.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_16.jpg"], 0, 1074.213);
        Trial:f7( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "black.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 699.386);
        Trial:f8( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 783.137);
        Trial:f9( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 749.046);
        Trial:f10( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "black.jpg", "black.jpg", "Folie14_7.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 758.184);
        Trial:f11( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "Folie14_5.jpg", "black.jpg", "Folie14_7.jpg", "black.jpg", "black.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 1114.892);
        Trial:f12( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "Folie14_5.jpg", "black.jpg", "Folie14_7.jpg", "Folie14_8.jpg", "black.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "black.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 1379.362);
        Trial:f13( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "Folie14_5.jpg", "black.jpg", "Folie14_7.jpg", "Folie14_8.jpg", "black.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "Folie14_14.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 787.77);
        Trial:f14( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "Folie14_5.jpg", "black.jpg", "Folie14_7.jpg", "Folie14_8.jpg", "Folie14_9.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "black.jpg", "Folie14_14.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 696.928);
        Trial:f15( ["Folie14_1.jpg", "Folie14_2.jpg", "Folie14_3.jpg", "Folie14_4.jpg", "Folie14_5.jpg", "black.jpg", "Folie14_7.jpg", "Folie14_8.jpg", "Folie14_9.jpg", "Folie14_10.jpg", "Folie14_11.jpg", "Folie14_12.jpg", "Folie14_13.jpg", "Folie14_14.jpg", "Folie14_15.jpg", "Folie14_16.jpg"], 0, 850.645);
        Trial:RATING( "Folie14.jpg", 6, 1290.003);
        Trial:e0( 0, 1881.887);
        Trial:e1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_13.jpg", "black.jpg", "black.jpg", "black.jpg"], 0, 747.28);
        Trial:e2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "black.jpg", "black.jpg"], 0, 786.947);
        Trial:e3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "black.jpg", "black.jpg"], 0, 750.689);
        Trial:e4( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "black.jpg", "Folie15_16.jpg"], 0, 824.964);
        Trial:e5( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "black.jpg", "Folie15_16.jpg"], 0, 766.443);
        Trial:e6( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "black.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "black.jpg", "Folie15_16.jpg"], 0, 864.225);
        Trial:e7( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "black.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 816.122);
        Trial:e8( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 1378.951);
        Trial:e9( ["black.jpg", "Folie15_2.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 812.644);
        Trial:e10( ["black.jpg", "Folie15_2.jpg", "Folie15_3.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 1277.617);
        Trial:e11( ["black.jpg", "Folie15_2.jpg", "Folie15_3.jpg", "Folie15_4.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 954.736);
        Trial:e12( ["Folie15_1.jpg", "Folie15_2.jpg", "Folie15_3.jpg", "Folie15_4.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "black.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 790.288);
        Trial:e13( ["Folie15_1.jpg", "Folie15_2.jpg", "Folie15_3.jpg", "Folie15_4.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "Folie15_8.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "black.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 1012.676);
        Trial:e14( ["Folie15_1.jpg", "Folie15_2.jpg", "Folie15_3.jpg", "Folie15_4.jpg", "black.jpg", "black.jpg", "Folie15_7.jpg", "Folie15_8.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "Folie15_11.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 1062.382);
        Trial:e15( ["Folie15_1.jpg", "Folie15_2.jpg", "Folie15_3.jpg", "Folie15_4.jpg", "Folie15_5.jpg", "black.jpg", "Folie15_7.jpg", "Folie15_8.jpg", "Folie15_9.jpg", "Folie15_10.jpg", "Folie15_11.jpg", "Folie15_12.jpg", "Folie15_13.jpg", "Folie15_14.jpg", "Folie15_15.jpg", "Folie15_16.jpg"], 0, 466.561);
        Trial:RATING( "Folie15.jpg", 2, 1751.061);
        Trial:i0( 0, 1161.057);
        Trial:i1( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 763.581);
        Trial:i2( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 753.829);
        Trial:i3( ["black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 748.805);
        Trial:i4( ["black.jpg", "black.jpg", "black.jpg", "Folie16_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 802.545);
        Trial:i5( ["black.jpg", "black.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 652.584);
        Trial:i6( ["black.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 727.908);
        Trial:i7( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 720.905);
        Trial:i8( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 741.656);
        Trial:i9( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "black.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 619.135);
        Trial:i10( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "Folie16_13.jpg", "black.jpg", "black.jpg", "Folie16_16.jpg"], 0, 486.2);
        Trial:i11( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "Folie16_13.jpg", "Folie16_14.jpg", "black.jpg", "Folie16_16.jpg"], 0, 545.874);
        Trial:i12( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "black.jpg", "Folie16_12.jpg", "Folie16_13.jpg", "Folie16_14.jpg", "Folie16_15.jpg", "Folie16_16.jpg"], 0, 552.182);
        Trial:i13( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "black.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "Folie16_11.jpg", "Folie16_12.jpg", "Folie16_13.jpg", "Folie16_14.jpg", "Folie16_15.jpg", "Folie16_16.jpg"], 0, 588.684);
        Trial:i14( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "black.jpg", "Folie16_7.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "Folie16_11.jpg", "Folie16_12.jpg", "Folie16_13.jpg", "Folie16_14.jpg", "Folie16_15.jpg", "Folie16_16.jpg"], 0, 500.413);
        Trial:i15( ["Folie16_1.jpg", "Folie16_2.jpg", "Folie16_3.jpg", "Folie16_4.jpg", "Folie16_5.jpg", "Folie16_6.jpg", "Folie16_7.jpg", "Folie16_8.jpg", "Folie16_9.jpg", "black.jpg", "Folie16_11.jpg", "Folie16_12.jpg", "Folie16_13.jpg", "Folie16_14.jpg", "Folie16_15.jpg", "Folie16_16.jpg"], 0, 572.332);
        Trial:RATING( "Folie16.jpg", 2, 1595.14);
      }
      Block()
      {
        Trial:INSTTEST( 0, 9722.913);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:Tu( "u", 4, "u", 7, 2536.047);
        Trial:Ta( "a", 5, "a", 8, 1561.669);
        Trial:Tb( "b", 2, "b", 6, 2104.156);
        Trial:Tv( "v", 1, "v", 3, 2224.98);
        Trial:Tw( "w", 3, "w", 4, 3391.609);
        Trial:Tc( "c", 6, "c", 8, 1328.433);
        Trial:Tx( "x", 1, "x", 1, 3247.639);
        Trial:Td( "d", 1, "d", 1, 2892.455);
        Trial:Ty( "y", 1, "y", 1, 1492.097);
        Trial:Te( "e", 1, "e", 1, 1292.551);
        Trial:Tf( "f", 1, "f", 1, 1333.315);
        Trial:Tz( "z", 1, "z", 1, 2802.168);
      }
      Block()
      {
        Trial:DEMO( "What is your major?", "biology", 9453.181);
        Trial:DEMO( "How old are you?", 19, 2803.772);
        Trial:RL( 0, 3348.617);
        Trial:KL( 1, 2262.242);
        Trial:TIPP( 0, 3854.002);
        Trial:DEMO( "Did you know any of the Chinese characters?", "no", 4867.911);
      }
    }
  }
}
