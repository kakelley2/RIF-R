Experiment( SubjectCode)
{
  Context()
  {
    AssignmentGroup()
    {
      ExperimentName = "REDMO 25";
      new Symbol = 1;
      DataFileDestination = ".";
      DataFileTrialFormat = "%SubjectCode%";
      SkipBoundingBlockDisplays = 0;
      RandomizeTrials = 0;
      StopKey = de.pxlab.pxl.KeyCodes.ENTER_KEY;
    }
    Session()
    {
      Instruction()
      {
        Text = " ";
      }
    }
    Block();
    Trial:INST1( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["Thank you for your interest in our study! ", " ", "In this task, you will be presented with a series of letters on the screen. For each letter shown, you will need to respond by typing a designated two-finger sequence by using the eight orange markers on the keyboard in front of you. The two-finger sequence will be different for each letter shown. Before you begin, please rest your fingers on the eight orange markers on the keyboard in front of you.", " ", "It is very important that you try to enter each two-finger sequence correctly for each letter presented on the screen. This task tests how well you can learn each two-finger sequence, so it is very important that you pay attention and take this task seriously. After the task, you will be tested on how well you learned and remembered the two-finger sequences for the letters."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "continue";
        LocationY = 300;
        Width = 200;
        Height = 60;
      }
    }
    Trial:INST2( Picture.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "In the initial learning phase of the experiment, you will be presented with a letter along with an image of a left hand and a right hand (see below). Two fingers on either the left hand or the right hand will quickly light up in order to reveal the two-finger sequenced related to that letter. The first finger to light up in the sequence will be in yellow, and the second finger to light up in the sequence will be in blue. After the two-finger sequence is flashed on the screen, the image of the two hands will disappear. Once the two hands disappear from the screen, you will just see the letter. Now enter the two-finger sequence for that letter previously shown.";
        LocationY = -200;
        FontSize = 24;
      }
      Picture()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Directory = "./images";
        LocationY = 80;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "continue";
        LocationY = 300;
        Width = 200;
        Height = 60;
      }
    }
    Trial:INST3( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["While performing this task, please try to keep your other fingers on their markers on the keyboard when they are not part of the two-finger sequence. It is important that you keep your eyes focused on the center of the screen where the individual letters appear. Please try to perceive the two-finger sequence presented below that letter from the corner of your eye, that is, do not let your eyes wander to the image of the two hands. Look at the letter and remember what the two-finger sequence is for that letter. It is quite difficult to learn the two-finger sequences. Therefore, please try your best to focus in order to do well.", " ", "Six of the twelve two-finger sequences involve two fingers on your left hand. These two-finger sequences are for the letters A, B, C, D, E, and F. The other six two-finger sequences involve your right hand. These two-finger sequences are for the letters U, V, W, X, Y, and Z. The two-finger sequence for any particular letter will always relate to the same hand for which it was originally shown. ", " ", "Once you click on Start!, you will have 10 seconds to rest your fingers on the buttons marked on the keyboard and to focus on the center of the screen. Then, the learning phase will begin."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INST4( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "This was a first pass with all the letters and corresponding two-finger movements. In the second part of the learning phase, you will be presented with the letters and two-finger sequences just as you were in the first part of the learning phase. Please note that the second part of this phase is longer than the first part. Each letter will be presented on the screen several times during this phase, so you will have the opportunity to learn the correct two-finger sequence for each letter.";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTAB( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["The two-finger sequences for these letters shown consist of finger movements on the right hand. When you are presented with each letter, try your hardest to remember the appropriate two-finger sequence you learned for that letter and press those keys.", "When you click on Start!, you will have 10 seconds to rest your fingers back on the buttons marked on the keyboard. Then, the first letter will appear. Please leave your fingers on their markers when they are not part of the two-finger response for a letter shown."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:IBILD( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "In the following task, you are asked to make an aesthetic evaluation of symbols, that is, an assessment of how attractive you think a symbol is. You will gradually unveil several Chinese characters by clicking on the gray boxes on the screen. A complete Chinese character will be revealed when you have clicked all of boxes. After the Chinese character has been fully uncovered, you will be asked to rate its aesthetic appeal at the bottom of the screen. Minus (-) signs indicate that you find the image unappealing. Plus (+) signs indicate that you find the image appealing. Please click which set of minus or plus signs most correctly matches your aesthetic evaluation.";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "OK";
        LocationY = 300;
        Width = 200;
        Height = 60;
      }
    }
    Trial:INSTTEST( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["Please raise your hand now. The experimenter will give you further instructions about your next task. Do not proceed until the experimenter gives you the go-ahead.", " ", "A memory test will now take place. You will again be presented with letters from the learning phase. Please remember the corresponding two-finger sequence for that letter and enter it. ", "When you click on Start!, you will have 10 seconds to rest your fingers on the markers on the keyboard as before. Then, the first letter will appear as in the previous task. Please leave your fingers on the markers during the task if they are not required in the two-finger sequence for a particular letter. "];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTRECALL( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = ["In the following test phase, you will be asked to type the two-finger sequences from the learning phase. There were 6 two-finger sequences for fingers on the left hand and 6 two-finger sequences for fingers on the right hand. For confirmation of a keystroke, a rhombus will appear on the screen. Hence, when the two-finger sequence has been typed, you will see two rhombuses on the screen. As soon as these have disappeared, you can enter the next two-finger sequence. If you cannot remember all the sequences, guess.", " ", "As soon as you click on Start!, you will have 10 seconds to rest your fingers on the markers of the keyboard as before. Then, please enter the two-finger sequences. Please continue to rest your other fingers on the markers when they are not used in a particular two-finger response."];
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTRECOG( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "A test now follows in which the images of the hands from the learning phase will be shown. As before, two fingers will light up to show a sequence. Please indicate whether or not the two-finger sequence is one that appeared during the learning phase. To indicate this, use the mouse to click on the appropriate box on the screen: old (if the two-finger sequence occurred in the learning phase) or new (if the two-finger sequence did not occur during the learning phase). ";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:INSTIMP( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "During the following part of the task, please type each of the letters appearing on the screen as quickly as you can.  Place your fingers as before on the marks and leave them there throughout. Enter each letter using the designated finger for that letter, e.g., the A key with the little finger of your left hand, the S key with the ring finger of your left hand, etc. ";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = "start!";
        LocationY = 350;
        Width = 120;
        Height = 60;
      }
    }
    Trial:COUNT( Message.Text)
    {
      Message()
      {
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:H( Message.Text, Picture.FileName)
    {
      Message()
      {
        LocationY = 0;
        Color = White;
      }
      Picture()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 150;
        LocationY = 260;
        Directory = "./images";
      }
    }
    Trial:H2( Picture.FileName)
    {
      Picture()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 150;
        LocationY = 260;
        Directory = "./images";
      }
    }
    Trial:L1( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L1.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L1.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L2( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L2.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L2.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L3( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L3.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L3.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L4( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L4.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L4.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L5( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L5.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L5.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:L6( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:L6.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:L6.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R1( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R1.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R1.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R2( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R2.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R2.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R3( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R3.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R3.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R4( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R4.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R4.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R5( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R5.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R5.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:R6( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 50;
      }
      Feedback:T1()
      {
        ResponseParameter = "Trial:R6.Message:A.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        Visible = 1;
      }
      Feedback:T2()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        ResponseParameter = "Trial:R6.Message:B.ResponseCode";
        CorrectCode = Symbol;
        CorrectText = " ";
        FalseText = "Error!";
        Evaluation = de.pxlab.pxl.EvaluationCodes.COMPARE_CODE;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        Visible = 1;
      }
    }
    Trial:RECOG( Picture.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      Picture()
      {
        Directory = "./images";
        LocationY = 260;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["alt", "neu"];
        LocationY = -50;
        Width = 240;
        Height = 60;
      }
    }
    Trial:RECALL( Message:A.Text, Message:B.Text)
    {
      Message:A()
      {
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
      }
      Message:B()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
        LocationY = 100;
      }
    }
    Trial:RECALLL( Message:A.Text, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        LocationY = 100;
      }
      Message:B()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        FontSize = 36;
        ResponseSet = [0, 69, 81, 82, 86, 87];
      }
    }
    Trial:RECALLR( Message:A.Text, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Color = White;
        FontSize = 36;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        LocationY = 100;
      }
      Message:B()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        FontSize = 36;
        ResponseSet = [0, 73, 78, 79, 80, 85];
      }
    }
    Trial:Ta( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tb( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tc( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Td( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Te( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 69, 73, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 87, 69, 73, 79, 80, 81, 82, 85];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tf( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 82, 69, 73, 79, 80, 81, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 81, 69, 73, 79, 80, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tu( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tv( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tw( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tx( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Ty( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 80, 69, 73, 79, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 85, 69, 73, 79, 80, 81, 82, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:Tz( Message:A.Text, Message:A.ResponseCode, Message:B.Text, Message:B.ResponseCode, ResponseTime)
    {
      Message:A()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 79, 69, 73, 80, 81, 82, 85, 87];
      }
      Message:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.LIMITED_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Duration = 1000000;
        Color = White;
        ResponseSet = [0, 73, 69, 79, 80, 81, 82, 85, 87];
      }
      ClearScreen:B()
      {
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 500;
      }
    }
    Trial:c0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:c15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:e15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:f15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i0( ChoiceResponse.Selection, ResponseTime)
    {
      ChoiceResponse()
      {
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i1( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i2( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i3( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i4( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i5( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i6( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i7( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i8( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i9( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -150;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i10( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i11( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 150;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i12( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i13( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = 50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i14( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = -50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:i15( PictureMatrix.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      PictureMatrix()
      {
        Directory = "./images";
        LocationX = 0;
        LocationY = 0;
        ReferencePoint = MIDDLE_CENTER;
        VerticalGap = 0;
        HorizontalGap = 0;
        NumberOfColumns = 4;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = " ";
        LocationY = 50;
        LocationX = -50;
        Width = 100;
        Height = 100;
      }
    }
    Trial:RATING( Picture:L.FileName, ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "How do you like this character? (- - - - - = not at all, + + + + + = very much)";
        LocationY = 320;
        FontSize = 24;
        Overlay = de.pxlab.pxl.OverlayCodes.DISPLAY_LIST;
      }
      Picture:L()
      {
        LocationY = 0;
        Directory = "./images";
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["-----", "----", "---", "--", "-", "+", "++", "+++", "++++", "+++++"];
        LocationY = 400;
        LocationX = 0;
        Width = 1200;
        Height = 30;
      }
    }
    Trial:DEMO( Message.Text, TextInput.Text, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Type in your answer, and then please press ENTER.";
        LocationY = -200;
        FontSize = 24;
        Overlay = de.pxlab.pxl.OverlayCodes.DISPLAY_LIST;
      }
      Message()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        Timer = de.pxlab.pxl.TimerCodes.CLOCK_TIMER;
        Duration = 0;
        FontSize = 32;
      }
      TextInput()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.TRANSPARENT;
        LocationY = 200;
        FontSize = 32;
        Timer = de.pxlab.pxl.TimerCodes.STOP_KEY_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
      }
    }
    Trial:RL( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Please indicate whether you are right- or left-handed.";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["right-handed", "left-handed"];
        LocationY = 250;
        Width = 460;
        Height = 60;
      }
    }
    Trial:KL( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Can you play the piano?";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["yes", "no"];
        LocationY = 250;
        Width = 460;
        Height = 60;
      }
    }
    Trial:TIPP( ChoiceResponse.Selection, ResponseTime)
    {
      TextParagraph()
      {
        Text = "Do you predominantly use the 10-finger system when typing on a keyboard?";
        LocationY = -50;
        FontSize = 24;
      }
      ChoiceResponse()
      {
        Overlay = de.pxlab.pxl.OverlayCodes.JOIN;
        Timer = de.pxlab.pxl.TimerCodes.MOUSE_TRACKING_TIMER|de.pxlab.pxl.TimerCodes.START_RESPONSE_TIMER|de.pxlab.pxl.TimerCodes.STOP_RESPONSE_TIMER;
        Choices = ["yes", "no"];
        LocationY = 250;
        Width = 460;
        Height = 60;
      }
    }
    // Session dependent assignments

    AssignmentGroup()
    {
      SubjectCode = 290;
      RemainingSessionGroup = 0;
      RemainingSessionRuns = 0;
      Date = "9/9/14 10:39:42 AM PDT";
      PXLabVersion = "2.1.19";
      PrimaryScreen.ColorDevice = de.pxlab.pxl.ColorDeviceTransformCodes.SONY_TRINITRON;
      PrimaryScreen.ColorDeviceDACRange = 255;
      PrimaryScreen.RedPrimary = [21.26, 0.621, 0.34];
      PrimaryScreen.GreenPrimary = [71.52, 0.281, 0.606];
      PrimaryScreen.BluePrimary = [7.22, 0.152, 0.067];
      PrimaryScreen.RedGamma = [2.4, 1];
      PrimaryScreen.GreenGamma = [2.4, 1];
      PrimaryScreen.BlueGamma = [2.4, 1];
      SecondaryScreen.ColorDevice = de.pxlab.pxl.ColorDeviceTransformCodes.SONY_TRINITRON;
      SecondaryScreen.ColorDeviceDACRange = 255;
      SecondaryScreen.RedPrimary = [21.26, 0.621, 0.34];
      SecondaryScreen.GreenPrimary = [71.52, 0.281, 0.606];
      SecondaryScreen.BluePrimary = [7.22, 0.152, 0.067];
      SecondaryScreen.RedGamma = [2.4, 1];
      SecondaryScreen.GreenGamma = [2.4, 1];
      SecondaryScreen.BlueGamma = [2.4, 1];
      DeviceWhitePoint = [100, 0.3065, 0.3468];
      CIEWhitePoint = 0;
    }
  }
  Factors()
  {
    IndependentFactor( Symbol)
    {
      FactorLevel( 1);
      FactorLevel( 2);
    }
    DependentFactor( ResponseTime);
  }
  Procedure()
  {
    Session()
    {
      Block()
      {
        Trial:INST1( 0, 41574.509);
        Trial:INST2( "Hand.jpg", 0, 24621.41);
        Trial:INST3( 0, 53656.885);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 1316.325);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 1193.581);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1500.352);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1044.295);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 1030.047);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 2, "b", 6, 1384.281);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 851.445);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 882.684);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 1043.022);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 915.721);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 914.065);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 1173.233);
      }
      Block()
      {
        Trial:INST4( 0, 17718.171);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 731.698);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 789.689);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 847.372);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 595.594);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 735.829);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 706.501);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 852.779);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 1202.365);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 6, 732.512);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 711.073);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1208.469);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 973.737);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 1419.688);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 699.934);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 3, "x", 1, 881.895);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 924.287);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 802.257);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 723.072);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 793.41);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1054.911);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 859.21);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 856.788);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 816.187);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 880.817);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1100.347);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 1008.952);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 722.365);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 1133.579);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 750.786);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 936.047);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 833.785);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 714.528);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 826.818);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 711.495);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 754.193);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 660.919);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 628.392);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 6, 920.003);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 1106.642);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 1092.084);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 898.483);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1182.885);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 827.101);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 787.049);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 766.227);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 1726.439);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 932.344);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 1079.916);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 974.942);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 691.248);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 877.892);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 908.367);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 812.176);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 594.267);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 839.654);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 557.09);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 787.496);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 906.69);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 690.636);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 603.534);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 664.873);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 634.23);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 821.878);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 682.779);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 613.672);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 704.1);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 902.492);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 6, 654.802);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 522.663);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 855.624);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 820.029);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 569.925);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 690.848);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 583.68);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 510.826);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 8, "e", 2, 1006.996);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 757.935);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 704.652);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 543.121);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 1030.76);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 684.915);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 563.166);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 888.476);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 945.087);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 641.509);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 659.921);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 699.927);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 765.78);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 739.495);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 715.693);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 728.816);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 689.481);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 891.625);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 506.889);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 583.425);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 664.183);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 425.594);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 1, "x", 1, 805.966);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 629.406);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 732.63);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 989.797);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 926.244);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 558.914);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 993.947);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 612.211);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 714.519);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 670.662);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 679.567);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 621.217);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 498.176);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 864.252);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 666.726);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 633.638);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 556.489);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 3, "u", 7, 2338.472);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 572.692);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 1, "e", 1, 649.323);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 556.846);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 785.372);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 3, "x", 1, 908.605);
      }
      Block()
      {
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "Hand.jpg");
        Trial:H( "a", "links_Mitte.jpg");
        Trial:H( "a", "links_Zeige2.jpg");
        Trial:L1( "a", 1, "a", 1, 333.54);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "Hand.jpg");
        Trial:H( "u", "rechts_Zeige.jpg");
        Trial:H( "u", "rechts_Mitte2.jpg");
        Trial:R1( "u", 1, "u", 1, 434.461);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "Hand.jpg");
        Trial:H( "f", "links_Zeige.jpg");
        Trial:H( "f", "links_klein2.jpg");
        Trial:L6( "f", 1, "f", 1, 531.842);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "Hand.jpg");
        Trial:H( "v", "rechts_Ring.jpg");
        Trial:H( "v", "rechts_Zeige2.jpg");
        Trial:R2( "v", 1, "v", 1, 764.92);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "Hand.jpg");
        Trial:H( "z", "rechts_Ring.jpg");
        Trial:H( "z", "rechts_Mitte2.jpg");
        Trial:R6( "z", 1, "z", 1, 552.878);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "Hand.jpg");
        Trial:H( "c", "links_Ring.jpg");
        Trial:H( "c", "links_klein2.jpg");
        Trial:L3( "c", 1, "c", 1, 681.8);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "Hand.jpg");
        Trial:H( "y", "rechts_klein.jpg");
        Trial:H( "y", "rechts_Zeige2.jpg");
        Trial:R5( "y", 1, "y", 1, 560.092);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "Hand.jpg");
        Trial:H( "w", "rechts_klein.jpg");
        Trial:H( "w", "rechts_Ring2.jpg");
        Trial:R3( "w", 1, "w", 1, 642.133);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "Hand.jpg");
        Trial:H( "d", "links_klein.jpg");
        Trial:H( "d", "links_Mitte2.jpg");
        Trial:L4( "d", 1, "d", 1, 886.563);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "Hand.jpg");
        Trial:H( "e", "links_Mitte.jpg");
        Trial:H( "e", "links_Ring2.jpg");
        Trial:L5( "e", 6, "e", 2, 1524.795);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "Hand.jpg");
        Trial:H( "b", "links_Zeige.jpg");
        Trial:H( "b", "links_Ring2.jpg");
        Trial:L2( "b", 1, "b", 1, 741.468);
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "Hand.jpg");
        Trial:H( "x", "rechts_Mitte.jpg");
        Trial:H( "x", "rechts_klein2.jpg");
        Trial:R4( "x", 3, "x", 1, 1181.819);
      }
      Block()
      {
        Trial:INSTAB( 0, 25722.446);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:Tu( "u", 1, "u", 1, 643.833);
        Trial:Tv( "v", 3, "v", 5, 1359.542);
        Trial:Tw( "w", 1, "w", 3, 2921.583);
        Trial:Tu( "u", 1, "u", 1, 1323.757);
        Trial:Tv( "v", 3, "v", 4, 1998.296);
        Trial:Tw( "w", 3, "w", 1, 1998.065);
        Trial:Tu( "u", 1, "u", 1, 1118.655);
        Trial:Tw( "w", 3, "w", 4, 1892.741);
        Trial:Tv( "v", 4, "v", 3, 1670.671);
        Trial:Tu( "u", 1, "u", 1, 1173.783);
        Trial:Tv( "v", 4, "v", 3, 4463.493);
        Trial:Tw( "w", 4, "w", 3, 1293.557);
        Trial:Tv( "v", 4, "v", 3, 1317.619);
        Trial:Tu( "u", 1, "u", 1, 870.975);
        Trial:Tw( "w", 4, "w", 3, 2622.644);
        Trial:Tu( "u", 1, "u", 1, 1229.449);
        Trial:Tv( "v", 4, "v", 3, 3495.004);
        Trial:Tw( "w", 1, "w", 3, 2390.208);
        Trial:Tu( "u", 1, "u", 1, 750.294);
        Trial:Tv( "v", 3, "v", 5, 918.142);
        Trial:Tw( "w", 3, "w", 1, 1605.608);
        Trial:Tu( "u", 1, "u", 1, 1182.108);
        Trial:Tw( "w", 4, "w", 3, 3078.683);
        Trial:Tv( "v", 3, "v", 5, 1154.496);
        Trial:Tu( "u", 1, "u", 1, 902.987);
        Trial:Tv( "v", 4, "v", 3, 3902.43);
        Trial:Tw( "w", 7, "w", 1, 1413.091);
        Trial:Tv( "v", 3, "v", 5, 1632.281);
        Trial:Tu( "u", 1, "u", 1, 821.225);
        Trial:Tw( "w", 7, "w", 1, 1148.923);
      }
      Block()
      {
        Trial:INSTTEST( 0, 524169.801);
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( "*");
        Trial:COUNT( " ");
        Trial:COUNT( " ");
      }
      Block()
      {
        Trial:Tx( "x", 1, "x", 1, 2466.675);
        Trial:Td( "d", 1, "d", 1, 2144.739);
        Trial:Te( "e", 1, "e", 1, 2289.181);
        Trial:Ty( "y", 7, "y", 5, 1242.304);
        Trial:Tz( "z", 1, "z", 1, 2783.899);
        Trial:Tf( "f", 1, "f", 1, 1640.504);
        Trial:Tu( "u", 1, "u", 1, 1085.976);
        Trial:Ta( "a", 6, "a", 2, 2063.324);
        Trial:Tv( "v", 3, "v", 5, 2770.592);
        Trial:Tb( "b", 2, "b", 6, 2327.051);
        Trial:Tc( "c", 1, "c", 2, 2401.79);
        Trial:Tw( "w", 1, "w", 3, 1854.834);
      }
      Block()
      {
        Trial:DEMO( "What is your major?", "psychology", 9350.094);
        Trial:DEMO( "How old are you?", 18, 2775.022);
        Trial:RL( 0, 5142.158);
        Trial:KL( 0, 2405.355);
        Trial:TIPP( 1, 4743.78);
      }
    }
  }
}
